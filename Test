参数配置测试
1. Query_cache_size, also called object_cache_size 保留的最近访问的object的个数，与query log结合使用
2. Relationship_weight_cache, 只保存最近访问的多少个关系的weight
3. ACCELERATE (true:consider only the most recently accessed objects, or false:consider all objects )
4. Load_factor
5. gap
6. Reshard_frequency
7. Alpha, beta
8. Replica_set_size
9. Partition_mode (consistent hashing or organization_based)
10. organization_detection_method (if organization_based, choose 1 of 2 detection method)
11. Querying_processing_method (2 candidate query processing)
12. Object division (choose whether divide a big object)
13. Object_size 
14. Transaction_size (for batch commands, treat how many commands as a transaction)

logs
1. Command log (object ids, categories (contain/role, contain/role-inverse,… ))
2. Query log or object log (most recently visited objects, 结合query_cache_size)
3. Relationship cache( 结合relation_cache_size， store the weights of most recently traversed relationships )

Indexes （names of BDB db files？）
Global indexes:
    1. object id; object name - object id (id allocation)
    2. object - storage node
    3. schema-object 
    4. object division
    5. organization_part table
    ...
    
Loclal indexes and files:
    1. command log 
    2. query log (cache_size)
    3. relationship weight log (cache_size)
    4. schema file 
    5. local object file 
    6. attr value  - object id index
    7. attr/rel name - object id index
    ...

################### 存在的问题 ##################################

Re-sharding
1. organization detection ACCELERATE 参数。
2. organization unification算法中：
    2.1 node capacity初始化，应减去 未判断organization 的objects的load。
    2.2 organization——part的load目前只考虑了个数。
    2.3 考虑MRV object以及partly move的情况。
3. 在organization unification，对object的存在节点进行移动后，相关的global and local index是否相应更新。
4. print organization detection以及organization unification的相关log：object与organization的rel weight总和， object移动情况。

Query Processing
1. 分发语句的mode。
2. sub query在master节点合并时，错误分支的剪枝问题。 
organ.db: organization底层存储表
sRel.db:
sRel_name.db: 查询基于rel的统计表，优化时才用
sInst.db:
sInst_name.db:查询基于inst的统计表，优化时才用
sSchema.db:
sSchema_name.db:查询基于schema的统计表，优化时才用
queryHot.db: 每个对象被查的次数统计
shuffleLog.db :查询记录起始对象 目标对象以及访问次数的表
shuffleSid.db :上面对应的索引表
